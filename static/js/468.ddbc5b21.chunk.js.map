{"version":3,"file":"static/js/468.ddbc5b21.chunk.js","mappings":"+JAgFA,UA7EwB,WACtB,OAA8BA,EAAAA,EAAAA,WAAS,GAAM,eAAtCC,EAAQ,KAAEC,EAAS,KACpBC,EAAe,WACnBD,GAAWD,EACb,EAEMG,EAAQ,WACZC,OAAOC,OAAO,CACZC,KAAM,EACNC,IAAK,EACLC,SAAU,WAEZN,GACF,EAEMO,GAAMC,EAAAA,EAAAA,WACZC,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIT,OAAOU,aAgBnBV,OAAOW,iBAAiB,UAfH,SAACC,GACfZ,OAAOU,YAAc,MACxBV,OAAOa,SAAW,GAAKb,OAAOa,SAAWC,KAAKC,IAAyB,IAArBf,OAAOU,aAAsBL,EAAIW,QAAQC,MAAMC,OAAS,MAAUb,EAAIW,QAAQC,MAAMC,OAAS,QAG7IlB,OAAOmB,YAAc,MACvBnB,OAAOa,SAAW,GAAKb,OAAOa,SAAWC,KAAKC,IAAyB,IAArBf,OAAOU,aAAsBL,EAAIW,QAAQC,MAAMC,OAAS,MAAUb,EAAIW,QAAQC,MAAMC,OAAS,OAEnJ,IAQAlB,OAAOW,iBAAiB,UAPL,SAACC,GACdQ,UAAUC,gBAAkB,IAC9BrB,OAAOU,aAAe,IAAOL,EAAIW,QAAQC,MAAMK,QAAU,OAAWjB,EAAIW,QAAQC,MAAMK,QAAU,OAEpG,GAIF,IAEA,IAAMC,EAAiBC,aAAaC,QAAQ,YAC5C,GAAgC9B,EAAAA,EAAAA,UAAS4B,GAAe,eAAjDG,EAAQ,KAAEC,EAAW,KAEtBC,EAAa,WACjBD,GAAaD,GACbG,SAASC,gBAAgBC,aAAa,aAAeL,EAAqB,OAAV,SAChEF,aAAaQ,QAAQ,WAAaN,EAAqB,OAAV,SAC7C7B,GAAWD,EACb,EAUA,OACE,iBAAKqC,UAAS,wBAA+B,IAAbrC,EAAoB,SAAW,IAAMsC,IAAK7B,EAAI,WAC5E,mBAAQ8B,KAAK,SAASF,UAAS,mBAA0B,IAAbrC,EAAoB,SAAU,IAAMwC,YAAatC,EAAcuC,aAAcvC,EAAcwC,WAAYxC,EAAa,UAC9J,iBAAMmC,UAAU,QAAO,UAAC,gBAAKM,IAAKC,sDAA8DC,IAAI,cAEtG,gBAAIR,UAAU,YAAW,WACvB,yBACE,mBAAQE,KAAK,SAASF,UAAU,cAAcS,QAASd,EAAYS,aAAcT,EAAW,UAC1F,iBAAMK,UAAU,QAAO,+BAG3B,yBACE,oBAAQE,KAAK,SAASF,UAAU,MAAMS,QAAS3C,EAAOsC,aAActC,EAAM,WACxE,iBAAMkC,UAAU,QAAO,qBACvB,iBAAMA,UAAU,UAAS,2BAMrC,C","sources":["components/Customs/Dark&Scroll.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n\nconst Mode_ChangerBtn = () => {\n  const [isActive, setActive] = useState(false);\n  const handleActive = () => { \n    setActive(!isActive);\n  }\n\n  const goTop = () => { \n    window.scroll({\n      left: 0,\n      top: 0,\n      behavior: \"smooth\"\n    })\n    handleActive();\n  }\n\n  const box = useRef();\n  useEffect(() => {\n    console.log(window.innerHeight);\n    const handleBottom = (e) => { \n      if ( window.innerHeight > 500 ) {\n        window.scrollY >= 0 && window.scrollY <= Math.abs(window.innerHeight * 3.5) ? (box.current.style.bottom = '4vh') : (box.current.style.bottom = '20vh');\n      } \n\n      if (window.innerWidth <= 480) {\n        window.scrollY >= 0 && window.scrollY <= Math.abs(window.innerHeight * 4.5) ? (box.current.style.bottom = '4vh') : (box.current.style.bottom = '10vh');\n      }\n    }\n    const handleView = (e) => {\n      if (navigator.maxTouchPoints >= 1) {\n        window.innerHeight <= 500 ? (box.current.style.display = \"none\") : (box.current.style.display = \"flex\");\n      }\n    }\n\n    window.addEventListener('scroll', handleBottom);\n    window.addEventListener('resize', handleView);\n  });\n\n  const storedDarkmode = localStorage.getItem('Darkmode');\n  const [Darkmode, setDarkmode] = useState(storedDarkmode);\n  \n  const handleDark = () => {\n    setDarkmode(!Darkmode);\n    document.documentElement.setAttribute('data-theme', !Darkmode ? 'light' : 'dark');\n    localStorage.setItem('Darkmode', !Darkmode ? 'light' : 'dark');\n    setActive(!isActive);\n  }\n\n  // useEffect(() => {\n  //   if (document.documentElement.getAttribute('data-theme' === 'dark')) {\n  //     console.log(\"Darkmode? true\");\n  //   } else {\n  //     console.log(\"Darkmode? false\");\n  //   }\n  // }, [Darkmode]);\n\n  return(\n    <div className={`color_change ${isActive === true ? \"active\" : \"\"}`} ref={box}>\n      <button type=\"button\" className={`gearBtn ${isActive === true ? \"active\": \"\"}`} onMouseDown={handleActive} onTouchStart={handleActive} onTouchEnd={handleActive}>\n        <span className=\"emoji\"><img src={process.env.PUBLIC_URL + `/assets/svgs/gear-svgrepo-com.svg`} alt=\"gear\"/></span>\n      </button>\n      <ul className=\"btns_wrap\">\n        <li>\n          <button type=\"button\" className=\"mode_change\" onClick={handleDark} onTouchStart={handleDark}>\n            <span className=\"blind\">mode changer</span>\n          </button>\n        </li>\n        <li>\n          <button type=\"button\" className=\"top\" onClick={goTop} onTouchStart={goTop}>\n            <span className=\"emoji\">â–²</span>\n            <span className=\"font en\">top</span>\n          </button>\n        </li>\n      </ul>\n  </div>\n  )\n};\n\nexport default Mode_ChangerBtn;\n\n\n\n\n\n\n\n\n\n"],"names":["useState","isActive","setActive","handleActive","goTop","window","scroll","left","top","behavior","box","useRef","useEffect","console","log","innerHeight","addEventListener","e","scrollY","Math","abs","current","style","bottom","innerWidth","navigator","maxTouchPoints","display","storedDarkmode","localStorage","getItem","Darkmode","setDarkmode","handleDark","document","documentElement","setAttribute","setItem","className","ref","type","onMouseDown","onTouchStart","onTouchEnd","src","process","alt","onClick"],"sourceRoot":""}